<?php

/**
 * Implementation of hook_menu
 */
function pond_menu(){
  $items = array();
  $items['pond/set_year'] = array(
    'page callback' => 'pond_set_year',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['admin/config/pond'] = array(
    'title' => 'Pond',
    'description' => 'Modify The Pond',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'position' => 'left',
    'weight' => -99999,
  );
  $items['admin/config/pond/settings'] = array(
    'title' => 'Pond Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pond_admin_form'),
    'description' => 'Modify General Pond Settings',
    'access arguments' => array('administer pond settings'),
  );
  $items['admin/config/pond/closeyear'] = array(
    'title' => 'Close Year',
    'page callback' => 'pond_admin_closeyear',
    'access arguments' => array('administer pond settings'),
  );
  return $items;
}

/**
 * Implementation of hook_permission
 */
function pond_permission() {
  return array(
    'administer pond settings' => array(
      'title' => t('Administer Pond Settings'),
    ),
    'choose year' => array(
      'title' => t('See the Choose Year selector'),
    ),
    'choose any year' => array(
      'title' => t('Choose any Pond Year'),
    )
  );
}

/**
 * Implements hook_views_api().
 */
function pond_views_api() {
  return array('api' => 3);
}


/**
 * Implements hook_form_alter().
 */
function pond_form_alter(&$form, &$form_state, $form_id){
  //I have to do this because for some reason, attaching an external js to a specific field does not work.
  if(
    ($form_id == 'eck__entity__form' && ($form['#entity_type'] == 'church' || $form['#entity_type'] == 'training_event'))
    || $form_id == 'eck__entity__form_add_church_church'
    || $form_id == 'eck__entity__form_edit_church_church'
    || $form_id == 'user_profile_form'
    || $form_id == 'eck__entity__form_add_training_event_training_event'
    || $form_id == 'eck__entity__form_edit_training_event_training_event'
    ){
    $form['#attached'] = array('js' => array(
      'https://maps.google.com/maps/api/js?key=AIzaSyAJCVNSzHmA1X4HrRX4DzNxblgv_bWDFJY&sensor=true&libraries=places' => array('type' => 'external', 'group' => JS_LIBRARY),
    ));
  }
  switch($form_id){
    case 'eck__entity__form_edit_training_event_training_event':
    case 'eck__entity__form_edit_international_application_international_application':
      $form['title']['#access'] = FALSE;
    break;
  }
}

/**
 * Implements hook_block_info().
 */
function pond_block_info() {
  $blocks['pond_set_year'] = array(
    'info' => t('Choose a Year'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 */
function pond_block_view($delta = '') {
  switch ($delta) {
    case 'pond_set_year':
      $block['subject'] = '';
      $block['content'] = (user_access('choose year'))?pond_set_year_block():'';
      break;
  }
  return $block;
}

function pond_set_year_block(){
  $currentyear = pond_get_year();
  if(user_access('choose any year')){
    $openyears = pond_get_years();
  } else {
    $openyears = pond_get_years(1);
  }

  if(module_exists('ctools') && count($openyears) > 1){
    ctools_include('jump-menu');
    foreach($openyears as $openyear){
      $url = url('pond/set_year/'.$openyear, array('query' => drupal_get_destination()));
      $targets[$url] = $openyear;
    }
    $options = array('title' => t('Select a Year:'), 'default_value' => array_search($currentyear, $targets), 'hide' => TRUE);
    $output = drupal_get_form('ctools_jump_menu', $targets, $options);
  } else {
    $output = '';
  }
  return $output;
}

function pond_admin_form(){
  $form['pond_default_year'] =  array(
      '#type' => 'textfield',
      '#title' => 'Default Year',
      '#description' => 'The default year for applications. Check that it is active.',
      '#default_value' => variable_get('pond_default_year'),
  );
  $form['pond_earlybird_cutoff'] =  array(
      '#type' => 'textfield',
      '#title' => 'Earlybird Cutoff',
      '#description' => 'The date in format "mm-dd" that earlybird rate is no longer available for each year (Default for nations that have not specified their own).',
      '#default_value' => variable_get('pond_earlybird_cutoff'),
  );
  $form['pond_training_info_link'] =  array(
      '#type' => 'textfield',
      '#title' => 'Link to Training Info (Default for nations that have not specified their own).',
      '#description' => 'E.g. "http://au.redfrogs.com/schoolies/training".',
      '#default_value' => variable_get('pond_training_info_link'),
  );

  $years = pond_get_years();
  $open_years = pond_get_years(1);
  $header = array('Year', 'Status', 'Action');
  $rows = array();
  foreach($years as $year){
    $status = in_array($year, $open_years) ? 'Open' : 'Closed';
    $action = '';
    if($status == 'Open'){
      $action = l('Close '.$year, 'admin/config/pond/closeyear/'.$year);
    }
    $rows[] = array($year, $status, $action);
  }
  $table = theme('table', array('header' => $header, 'rows' => $rows));
  $form['pond_years'] =  array(
      '#markup' => $table,
  );

  return system_settings_form($form);
}

function pond_admin_closeyear($year = FALSE){
  if(!empty($year)){
    //1: Get all blocks for this year
    $blocks_query = new EntityFieldQuery();
    $blocks_query->entityCondition('entity_type', 'night')
      ->propertyCondition('year', $year);
    $result = $blocks_query->execute();

    if (isset($result['night'])) {
      foreach($result['night'] as $bid => $block){
        //2: Get any relations of type allows_bookings_for for those blocks
        $relations = pond_relation_get('night', $bid, 'allows_bookings_for');
        if (isset($relations['allows_bookings_for'])) {
          foreach($relations['allows_bookings_for'] as $relation){
            //3: Turn off the "active" field on each relation
            if(!empty($relation->field_active['und'][0]['value'])){
              $relation->field_active = array(LANGUAGE_NONE => array(0 => array('value' => 0)));
              relation_save($relation); //HOT!
            }
          }
        }
      }
    }
    //4: Clear cache
    cache_clear_all('pond:active_locations:' . $year, 'cache_pond');
    cache_clear_all('pond:open_years', 'cache_pond');
  }
  drupal_goto('admin/config/pond/settings');
}

function pond_form_rebuild_callback($form, $form_state) {
  return $form;
}

function pond_delete_block_relations($location_id, $week_number, $block_type, $year = NULL){
  $year = empty($year) ? pond_get_year() : $year;
  $relations = pond_relation_get('location', $location_id, 'allows_bookings_for');
  if(!empty($relations['allows_bookings_for'])){
    foreach($relations['allows_bookings_for'] as $relation){
      $night = entity_load_single('night', $relation->endpoints['und'][1]['entity_id']);
      if($night->type == 'block' && $night->year == $year){
        $type = pond_regos_get_field_value('night', $night, 'field_block_type');
        $week = pond_regos_get_field_value('night', $night, 'field_block_week');
        if($type == $block_type && $week == $week_number){
          relation_delete($relation->rid);
        }
      }
    }
  }
}

function pond_get_block($location_id, $week_number, $block_type, $return_relation = FALSE, $year = NULL){
  //Todo: Maybe cachethis?
  $year = empty($year) ? pond_get_year() : $year;
  $relations = pond_relation_get('location', $location_id, 'allows_bookings_for');
  if(!empty($relations['allows_bookings_for'])){
    foreach($relations['allows_bookings_for'] as $relation){
      $night = entity_load_single('night', $relation->endpoints['und'][1]['entity_id']);
      if($night->type == 'block' && $night->year == $year){
        $type = pond_regos_get_field_value('night', $night, 'field_block_type');
        $week = pond_regos_get_field_value('night', $night, 'field_block_week');
        if($type == $block_type && $week == $week_number){
          return ($return_relation) ? $relation : $night;
        }
      }
    }
  }
  $skeleton_block = entity_create('night', array('type' => 'block'));
  $skeleton_relation = relation_create('allows_bookings_for', array(
      array('entity_type' => 'location', 'entity_id' => 0),
      array('entity_type' => 'night', 'entity_id' => 0),
      ));
  unset($skeleton_relation->endpoints);
  return ($return_relation) ? $skeleton_relation : $skeleton_block;
}

function pond_get_block_by_dates($start_date, $end_date, $week_number, $block_type){
  $night = FALSE;//Couldn't find any existing matching block
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'night')
          ->entityCondition('bundle', 'block')
          ->fieldCondition('field_dates', 'value', $start_date)
          ->fieldCondition('field_dates', 'value2', $end_date)
          ->fieldCondition('field_block_week', 'value', $week_number)
          ->fieldCondition('field_block_type', 'value', $block_type)
          ->execute();
  if(!empty($results['night']))
  {
    $night = current($results['night']);
    $night = entity_load_single('night', $night->id);
  }
  return $night;
}

/*
 * $format ranges from 0 - 3 with 0 being the most vague and 3 the most informative
 */
function pond_get_block_title($date = NULL, $date_relation = NULL, $format = 1){
  if(!empty($date) && is_numeric($date)){
    $date = entity_load_single('night', $date);
  }
  if(empty($date))
  {
    if(empty($date_relation))
    {
      return FALSE;
    }
    $date_id = pond_regos_get_field_value('relation', $date_relation, 'endpoints', 1, 'entity_id');
    $date = entity_load_single('night', $date_id);
  }

  if(isset($date_relation->field_block_label) && !empty($date_relation->field_block_label))
  {
    $title = pond_regos_get_field_value('relation', $date_relation, 'field_block_label');
  }
  else
  {
    $week = pond_regos_get_field_value('night', $date, 'field_block_week');
    $type = pond_regos_get_field_value('night', $date, 'field_block_type');
    $title = ($week == 2) ? 'Week '.$week.': '.$type : $type;
  }

  if($format > 0)
  {
    $start_date = pond_regos_get_field_value('night', $date, 'field_dates');
    $end_date = pond_regos_get_field_value('night', $date, 'field_dates', 0, 'value2');
    if($format == 1)
    {
      $start_date = date('jS', strtotime($start_date));
      $end_date = date('jS', strtotime($end_date));
    }
    else
    {
      $start_date = date('j M', strtotime($start_date));
      $end_date = date('j M', strtotime($end_date));
    }
    $title .= ' ('.$start_date.' - '.$end_date.')';
  }

  if($format > 2)
  {
    $title .= ' '.$date->year;
  }

  return $title;
}

/**
 * I use this because I want the admin to be able to use the UI to add more fields to the fieldgroups.
 * Currently not working. See http://drupal.org/node/2006604
 *
 * @param $fieldgroups = array
 */
function pond_attach_fieldgroups(&$form, &$form_state, $fieldgroups, $entity_type, $bundle, $entity = FALSE){
  $tmp_form = $tmp_form_state = array();
  $skeleton = ($entity) ? $entity : entity_create($entity_type, array('type' => $bundle));
  field_attach_form($entity_type, $skeleton, $tmp_form, $tmp_form_state);
  foreach($fieldgroups as $fieldgroup){
    if(isset($tmp_form['#groups'][$fieldgroup]) && !empty($tmp_form['#groups'][$fieldgroup]->children)){
      foreach($tmp_form['#groups'][$fieldgroup]->children as $child){
        field_attach_form($entity_type, $skeleton, $form, $form_state, NULL, array('field_name' => $child));
      }
    }
  }
}

/**
 * Checks the year is valid and sets it into session, before returning to destination.
 */
function pond_set_year($year){
  $open_years = pond_get_years();
  if(!in_array($year, $open_years)){
    $year = $open_years[0];
  }
  $_SESSION['pond_current_year'] = $year;
  drupal_goto();
  return '';
}

/**
 * Returns the year that has been selected by the user.
 */
function pond_get_year($applications = FALSE) {
  //If there is a year in the session, use it. Otherwise get the default year.
  $year = empty($_SESSION['pond_current_year'])?variable_get('pond_default_year'):$_SESSION['pond_current_year'];
  //If restricted, check the year against the open years. If not there, return the first open year instead.
  $open_years = pond_get_years(1);
  if($applications){
    if(!in_array($year, $open_years)){
      $year = $open_years[0];
    }
  }
  if((!is_numeric($year)) || (strlen($year) != 4)){
    return $open_years[0];
  }
  return $year;
}

/**
 * Returns an array of all available years.
 */
function pond_get_years($applications = FALSE) {
  for($i = 2012; $i <= date('Y')+3; $i++)
  {//Start in 2012 and end 3 years from now
    $all_years[] = $i;
  }
  if($applications){
    $open_years = &drupal_static(__FUNCTION__);
    if (!isset($open_years))
    {
      if ($cache = cache_get('pond:open_years', 'cache_pond'))
      {
        $open_years = $cache->data;
      }
      else
      {
        foreach($all_years as $all_year){
          $active = pond_regos_get_active_locations($all_year);
          if(!empty($active['locations'])){
            $open_years[] = $all_year;
          }
        }
      }
    }
    cache_set('pond:open_years', $open_years, 'cache_pond');
    return $open_years;
  }
  return $all_years;
}

/**
 * Returns a list of years this user has registered for.
 */
function pond_get_registered_years($uid) {
  $years = array();
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'registrations')
          ->propertyCondition('uid', $uid)
          ->execute();
  if(empty($results['registrations'])){
    return FALSE;
  }
  $registrations = entity_load('registrations', array_keys($results['registrations']));
  foreach($registrations as $registration){
    $years[] = $registration->year;
  }
  sort($years);
  return $years;
}

/**
 * Check if applications are open for the currently selected year.
 */
function pond_check_year(){
  $year = pond_get_year();//Not restricted
  $years = pond_get_years(1);//Restricted
  return in_array($year, $years);
}

/**
 * Check if the user has already applied this year
 */
function pond_check_for_application($year = false){
  global $user;
  $year = ($year)?$year:pond_get_year();
  $info = pond_get_by_uid($user->uid, $year);
  return !empty($info['registrations']);
}

/*
 * Take in a User ID and pass back
 * - all the relevant entity IDs
 * - worker's status
 * - Paid / Owing
 * - Base Title
 */
function pond_get_by_uid($uid, $year = ''){
  $user = user_load($uid);
  if(empty($user->uid)){
    return FALSE;
  }
  $year = (empty($year))?pond_get_year():$year;

  $return_array = &drupal_static(__FUNCTION__ . ':' . $uid . ':' . $year);
  if (!isset($return_array))
  {
    if ($cache = cache_get('pond:user_info:' . $uid . ':' . $year, 'cache_pond'))
    {
      $return_array = $cache->data;
    }
    else
    {
      $return_array['user'] = $uid;
      $return_array['year'] = $year;
      //Perhaps I should make a similar function that supplies ALL INFO, without having to sort through entity crap...
      //SQL just seems like the least-intensive way of retrieving this info... but should I be using CRUD functions?? EntityFieldQuery does not query across multiple entity types

      $query = db_select('users', 'u');
      $query->addField('u', 'uid');
      $query->leftJoin('eck_worker', 'w', 'w.uid = u.uid AND w.year = :year', array(':year' => $year));
      $query->addField('w', 'id', 'wid');
      $query->leftJoin('eck_registrations', 'r', 'r.uid = u.uid AND r.year = :year', array(':year' => $year));
      $query->addField('r', 'id', 'rid');
      $query->addField('r', 'created', 'applicationdate');
      $query->leftJoin('eck_international_application', 'ia', 'ia.uid = u.uid AND ia.year = :year', array(':year' => $year));
      $query->addField('ia', 'id', 'iaid');
      $query->leftJoin('eck_reference', 'ref', 'ref.uid = u.uid AND ref.year = :year', array(':year' => $year));
      $query->addField('ref', 'id', 'refid');
      $query->leftJoin('eck_assessment', 'ass', 'ass.uid = u.uid AND ass.year = :year', array(':year' => $year));
      $query->addField('ass', 'id', 'assid');
      $query->condition('u.uid', $uid);
      $result = $query->execute()->fetchAll();
      foreach($result as $record){
        $return_array['registrations'] = $record->rid;
        $return_array['registration_date'] = date('Y-m-d', $record->applicationdate);
        $return_array['international_application'] = $record->iaid;
        $return_array['worker'] = $record->wid;
        $return_array['reference'] = $record->refid;
        $return_array['assessment'] = $record->assid;
      }
      if(!empty($return_array['registrations'])){
        $church = pond_relation_get_simple('registrations', $return_array['registrations'], 'goes_to_church', TRUE);
        $return_array['church'] = empty($church)?FALSE:$church->id;
        $return_array['church_formatted'] = empty($church)?FALSE:$church->title;

        $role = pond_relation_get_simple('registrations', $return_array['registrations'], 'has_applied_for_role', TRUE);
        $return_array['volunteer_role'] = empty($role)?FALSE:$role->id;
        $return_array['volunteer_role_formatted'] = empty($role)?FALSE:$role->title;

        $referee = pond_relation_get_simple('registrations', $return_array['registrations'], 'listed_referee', TRUE);
        $return_array['referee'] = empty($referee)?FALSE:$referee->id;
        $return_array['referee_formatted'] = empty($referee)?FALSE:$referee->title;

        $zone = pond_relation_get_simple('worker', $return_array['worker'], 'is_assigned_to_zone', TRUE);
        $return_array['zone'] = empty($zone)?FALSE:$zone->id;
        $return_array['zone_formatted'] = empty($zone)?FALSE:$zone->title;

        $leader = pond_relation_get_simple('worker', $return_array['worker'], 'has_team_leader', TRUE);
        $return_array['leader'] = empty($leader)?FALSE:$leader->id;
        $return_array['leader_formatted'] = empty($leader)?FALSE:$leader->title;

        $return_array['status'] = pond_regos_get_field_value('worker', $return_array['worker'], 'field_worker_status');

        //Get the location
        $query = pond_relation_get('registrations', $return_array['registrations'], 'has_applied_for_location');
        if(is_array($query['has_applied_for_location'])){
          foreach($query['has_applied_for_location'] as $value){
            $location = entity_load_single('location', $value->endpoints['und'][1]['entity_id']);
            $return_array['location'] = $location->id;
            $return_array['location_formatted'] = $location->title;
          }
        }

        //get the nation
        $nation = pond_nations_get_location_nation($return_array['location']);
        $return_array['nation'] = $nation->id;
        $return_array['nation_formatted'] = $nation->title;

        //get the dates (array)
        $query = pond_relation_get('registrations', $return_array['registrations'], 'has_applied_for_dates');
        if(is_array($query['has_applied_for_dates'])){
          foreach($query['has_applied_for_dates'] as $value){
            $date = entity_load_single('night', $value->endpoints['und'][1]['entity_id']);
            $return_array['dates'][] = $date->id;
            $dates_formatted[] = pond_get_block_title($date);
          }
          $return_array['dates_formatted'] = implode(' | ', $dates_formatted);
        }

        //get the buildings (array)
        $query = pond_relation_get('worker', $return_array['worker'], 'is_assigned_to_building');
        if(is_array($query['is_assigned_to_building'])){
          foreach($query['is_assigned_to_building'] as $value){
            $building = entity_load_single('building', $value->endpoints['und'][1]['entity_id']);
            $return_array['building'][] = $building->id;
            $buildings_formatted[] = $building->title;
          }
          $return_array['building_formatted'] = implode(' | ', $buildings_formatted);
        } else {
          $return_array['building'] = FALSE;
          $return_array['building_formatted'] = FALSE;
        }
      } else {
        $return_array['registrations'] = FALSE;
      }

      $return_array['finances'] = module_exists('pond_payments')?pond_payments_get_financials($uid):FALSE;

      $prefix = field_get_items('user', $user, 'field_prefix_name');
      $first = field_get_items('user', $user, 'field_first_name');
      $last = field_get_items('user', $user, 'field_last_name');
      $return_array['full_name'] = $prefix[0]['value'].' '.$first[0]['value'].' '.$last[0]['value'];

      $return_array['formatted_address'] = pond_format_address('user', $user);
      $return_array['email'] = $user->mail;
/*
      $number = field_get_items('user', $user, 'field_address_street_number');
      $name = field_get_items('user', $user, 'field_address_street_name');
      $suburb = field_get_items('user', $user, 'field_address_suburb');
      $state = field_get_items('user', $user, 'field_address_state');
      $postcode = field_get_items('user', $user, 'field_address_postcode');
      $country = field_get_items('user', $user, 'field_address_country');
      $return_array['formatted_address'] = $number[0]['value'].' '.$name[0]['value'].', '.$suburb[0]['value'].' <br />'."\n"
        .$state[0]['value'].' '.$postcode[0]['value'].', '.$country[0]['value'];
*/

      //Get the Base Title for naming entities (name, gender, age)
      $gender = field_get_items('user', $user, 'field_user_gender');
      $dob = field_get_items('user', $user, 'field_user_dob');
      $return_array['base_title'] = $return_array['full_name']. ' ('.
              $gender[0]['value'].'|'.pond_get_age($dob[0]['value'], $year).')';

      cache_set('pond:user_info:' . $uid . ':' . $year, $return_array, 'cache_pond');
    }
  }

  return $return_array;
  //debug($return_array);
}

/**
 * Want to make sure random punctuaton/spaces aren't printed if fields are missing.
 */
function pond_format_address($entity_type, $entity){
  //Get values
  $number = pond_regos_get_field_value($entity_type, $entity, 'field_address_street_number');
  $name = pond_regos_get_field_value($entity_type, $entity, 'field_address_street_name');
  $suburb = pond_regos_get_field_value($entity_type, $entity, 'field_address_suburb');
  $state = pond_regos_get_field_value($entity_type, $entity, 'field_address_state');
  $postcode = pond_regos_get_field_value($entity_type, $entity, 'field_address_postcode');
  $country = pond_regos_get_field_value($entity_type, $entity, 'field_address_country');

  //Add Commas
  $name = empty($name) ? $name : $name.',';
  $postcode = empty($postcode) ? $postcode : $postcode.',';

  //Add Spaces
  $line1 = implode(' ', array($number, $name, $suburb));
  $line2 = implode(' ', array($state, $postcode, $country));

  //Add Breaks
  $address = implode("<br />\n", array($line1, $line2));

  return $address;
}

/**
 * Implement hook_entity_presave()
 * Clearing our cache.
 */
function pond_entity_presave($entity, $type){
  switch($type){
    case 'user':
    case 'registrations':
    case 'reference':
    case 'assessment':
    case 'worker':
    case 'payment':
      if(!empty($entity->uid)){
        $year = '';
        if(!empty($entity->year)){
          $year = ':'.$entity->year;
        }
        cache_clear_all('pond:user_info:' . $entity->uid . $year, 'cache_pond', TRUE);
      }
    break;
    case 'training_event':
      $state = pond_regos_get_field_value('training_event', $entity, 'field_address_state');
      $venue = pond_regos_get_field_value('training_event', $entity, 'field_venue_name');
      $date = pond_regos_get_field_value('training_event', $entity, 'field_training_dates');
      $date = date('jS M', strtotime($date));
      $entity->title = $state .': '. $date .': '. $venue;

      if(!isset($entity->year) || empty($entity->year)){
        $entity->year = pond_get_year();
      }
    break;
  }
}

/**
 * Implement hook_entity_delete()
 * Clearing our cache.
 */
function pond_entity_delete($entity, $type){
  switch($type){
    case 'registrations':
      $info = pond_get_by_uid($entity->uid, $entity->year);
      if(!empty($info['worker'])){
        entity_delete('worker', $info['worker']);
      }
      if(!empty($info['international_application'])){
        entity_delete('international_application', $info['international_application']);
      }
      cache_clear_all('pond:user_info:' . $entity->uid . ':' . $entity->year, 'cache_pond', TRUE);
    break;
    case 'user':
      $years = pond_get_registered_years($entity->uid);
      if(!empty($years)){
        foreach($years as $year){
          $info = pond_get_by_uid($entity->uid, $year);
          entity_delete('registrations', $info['registrations']);
          if(!empty($info['reference'])){
            entity_delete('reference', $info['reference']);
          }
          if(!empty($info['assessment'])){
            entity_delete('assessment', $info['assessment']);
          }
        }
      }
      cache_clear_all('pond:user_info:' . $entity->uid, 'cache_pond', TRUE);
    break;
  }
  switch($type){
    case 'reference':
    case 'assessment':
    case 'worker':
    case 'payment':
      if(!empty($entity->uid)){
        $year = '';
        if(!empty($entity->year)){
          $year = ':'.$entity->year;
        }
        cache_clear_all('pond:user_info:' . $entity->uid . $year, 'cache_pond', TRUE);
      }
    break;
  }
}

/**
 * Given a block, returns a renderable array.
 */
function pond_render_block($module, $delta) {
  $block = block_load($module, $delta);
  $render = _block_render_blocks(array($block));
  return _block_get_renderable_array($render);
}

//If you only need endpoints, consider using relation_get_endpoints() instead
function pond_relation_get($entity_type, $entity_id, $relation_type = NULL, $r_index = NULL) {
  $query = relation_query($entity_type, $entity_id, $r_index);
  if ($relation_type) {
    $query->entityCondition('bundle', $relation_type);
  }
  $results = $query->execute();
  $result = reset($results);
  if (empty($result)) {
    return FALSE;
  }
  // Loop through each relation
  foreach ($results as $relation) $rids[] = $relation->rid;
  // Load all related entities endpoint references
  $raw_relations = relation_load_multiple($rids);

  // Reformat relations output.
  foreach ($raw_relations as $relation) {
    if (!isset($relations[$relation->relation_type])) {
        $relations[$relation->relation_type] = array();
    }
    $relations[$relation->relation_type][] = $relation;
  }

  return $relations;
 }

/**
 * If you know both ends, and you just want the relation entity.
 */
function pond_relation_get_known($source_type, $source_id, $target_type, $target_id, $relation_type){
  $query = db_select('field_data_endpoints', 'end1');
  $query->addField('end1', 'entity_id', 'rid');
  $query->condition('end1.bundle', $relation_type);
  $query->condition('end1.endpoints_entity_type', $source_type);
  $query->condition('end1.endpoints_entity_id', $source_id);
  $query->leftJoin('field_data_endpoints', 'end2', 'end1.revision_id = end2.revision_id AND end2.endpoints_entity_type = :target_type AND end2.endpoints_entity_id = :target_id', array(':target_type' => $target_type, ':target_id' => $target_id));
  $query->condition('end2.endpoints_entity_id', $target_id);
  $rid = $query->execute()->fetchField();
  return relation_load($rid);
}

 /*
  * Returns only the id of a single target. You are expected to know the target's entity type
  * Similar to relation_get_related_entity()?????
  */
 function pond_relation_get_simple($source_type, $source_id, $relation_type, $return_entity = FALSE){
    $query = pond_relation_get($source_type, $source_id, $relation_type);
    if(is_array($query[$relation_type])){
      foreach($query[$relation_type] as $value){
        $id = $value->endpoints['und'][1]['entity_id'];
        $type = $value->endpoints['und'][1]['entity_type'];
        return ($return_entity) ? entity_load_single($type, $id) : $id;
      }
    }
 }


/*
* Saves a new relationship
* I think it also deletes any existing relationship if it isn't identical.
*/
function pond_save_relationship($relation_type, $source_entity, $source_value, $target_entity, $target_value, $optional = FALSE){
  $rid = FALSE;
  $query = pond_relation_get($source_entity, $source_value, $relation_type);
  if(is_array($query[$relation_type])){
    foreach($query[$relation_type] as $value){
      if(empty($target_value)){
        if($optional){
          relation_delete($value->rid);
        }
      } elseif($value->endpoints['und'][1]['entity_id'] != $target_value){
        // Different than what was selected in the form, so delete it and make the new one.
        relation_delete($value->rid);
        $relation = relation_create($relation_type, array(
          array('entity_type' => $source_entity, 'entity_id' => $source_value),
          array('entity_type' => $target_entity, 'entity_id' => $target_value),
        ));
        $rid = relation_save($relation);
      }
    }
  } elseif(!empty($target_value)) {
    //No relationship in the DB yet - making the first one. (important for optional fields)
    $relation = relation_create($relation_type, array(
      array('entity_type' => $source_entity, 'entity_id' => $source_value),
      array('entity_type' => $target_entity, 'entity_id' => $target_value),
    ));
    $rid = relation_save($relation);
  }
  return $rid;
}


/**
 * Given a year, will tell you what day schoolies starts (location-agnostic) in format YYYY-MM-DD.
 */
function pond_get_first_day($year){
  $query = db_select('field_data_field_dates', 'd');
  $query->addField('d', 'field_dates_value', 'date');
  $query->condition('d.field_dates_value', $year. '%', 'LIKE');
  $query->orderBy('d.field_dates_value');
  $query->range(0, 1);
  $earliest_date = $query->execute()->fetchField();
  return substr($earliest_date, 0, 10);
}

/**
 * Given a dob (in format YYYY-MM-DD), and a year, will tell you the age at start of schoolies.
 */
function pond_get_age($dob, $year = FALSE){
  $year = ($year)?$year:pond_get_year();
  $date = pond_get_first_day($year);
  //If no starting date has been specified for this year, calculate on Jan 1.
  $date = ($date) ? $date : $year . '-01-01';
  return floor(( strtotime($date) - strtotime($dob) ) / 86400 / 365.25);
}


/*
 * accepts the following filters:
 * - location (array of ids)
 * - status (e.g. array("Applied"))
 * - year (e.g. 2013)
 * - date id (e.g. 22) //Consider using week instead.
 * - week (e.g. 2)
 * - role (e.g. 2)
 */
function pond_count_regos($filter = array()){
  //dpm($filter);
  $year = isset($filter['year'])?$filter['year']:pond_get_year();

  ##Primary Query
  $query = db_select('eck_registrations', 'reg');
  $query->condition('reg.year', $year);
  $query->leftJoin('eck_worker', 'w', 'w.uid = reg.uid AND w.year = :year', array(':year' => $year));
  $query->leftJoin('field_data_field_worker_status', 's', 's.entity_id = w.id');
  //Assumes everyone has a worker
  $query->condition('s.field_worker_status_value', 'Declined', '!=');
  $query->condition('s.field_worker_status_value', 'Cancelled', '!=');

  ##Filter specific locations
  if(isset($filter['location'])){
    $query->leftJoin('field_data_endpoints', 'rel', 'rel.endpoints_entity_id = reg.id AND rel.bundle = :bundle AND rel.endpoints_entity_type = :type', array(':bundle' => 'has_applied_for_location', ':type' => 'registrations'));
    $query->leftJoin('field_data_endpoints', 'rel2', 'rel2.revision_id = rel.revision_id AND rel2.bundle = :bundle2 AND rel2.endpoints_entity_type = :type2', array(':bundle2' => 'has_applied_for_location', ':type2' => 'location'));
    $db_or = db_or();
    foreach($filter['location'] as $location){
      $db_or->condition('rel2.endpoints_entity_id', $location);
    }
    $query->condition($db_or);
  }

  ##Filter specific status
  if(isset($filter['status'])){
    $query->condition('s.field_worker_status_value', $filter['status']);
  }

  ##Filter specific Checkin Status
  if(isset($filter['checkin'])){
    $query->leftJoin('field_data_field_checked_in', 'chk', 'chk.entity_id = w.id');
    $query->condition('chk.field_checked_in_value', $filter['checkin']);
  }

  ##Filter by week
  if(isset($filter['week']) && $filter['week'] != 'all'){
    $query->leftJoin('field_data_endpoints', 'drel', 'drel.endpoints_entity_id = reg.id AND drel.bundle = :bundle3 AND drel.endpoints_entity_type = :type3', array(':bundle3' => 'has_applied_for_dates', ':type3' => 'registrations'));
    $query->leftJoin('field_data_endpoints', 'drel2', 'drel2.revision_id = drel.revision_id AND drel2.bundle = :bundle4 AND drel2.endpoints_entity_type = :type4', array(':bundle4' => 'has_applied_for_dates', ':type4' => 'night'));
    $query->leftJoin('eck_night', 'night', 'drel2.endpoints_entity_id = night.id');
    $query->leftJoin('field_data_field_block_week', 'wk', 'wk.entity_id = night.id');
    $query->condition('wk.field_block_week_value', $filter['week']);
  }

  ##Filter by date
  if(isset($filter['date']) && is_numeric($filter['date'])){
    $query->leftJoin('field_data_endpoints', 'darel', 'darel.endpoints_entity_id = reg.id AND darel.bundle = :dabundle AND darel.endpoints_entity_type = :datype', array(':dabundle' => 'has_applied_for_dates', ':datype' => 'registrations'));
    $query->leftJoin('field_data_endpoints', 'darel2', 'darel2.revision_id = darel.revision_id AND darel2.bundle = :dabundle2 AND darel2.endpoints_entity_type = :datype2', array(':dabundle2' => 'has_applied_for_dates', ':datype2' => 'night'));
    $query->condition('darel2.endpoints_entity_id', $filter['date']);
  }

  ##Filter by role
  if(isset($filter['role']) && is_numeric($filter['role'])){
    $query->leftJoin('field_data_endpoints', 'rrel', 'rrel.endpoints_entity_id = reg.id AND rrel.bundle = :rbundle AND rrel.endpoints_entity_type = :rtype', array(':rbundle' => 'has_applied_for_role', ':rtype' => 'registrations'));
    $query->leftJoin('field_data_endpoints', 'rrel2', 'rrel2.revision_id = rrel.revision_id AND rrel2.bundle = :rbundle2 AND rrel2.endpoints_entity_type = :rtype2', array(':rbundle2' => 'has_applied_for_role', ':rtype2' => 'volunteer_role'));
    $query->condition('rrel2.endpoints_entity_id', $filter['role']);
  }

  ##return count
  $count = $query->countQuery()->execute()->fetchField();
  //debug($query->countQuery()->__toString());

  /* This stuff doesn't work...
  if(isset($filter['return_payments'])){
    $query->leftJoin('field_data_field_cost', 'co', 'co.entity_id = reg.id');
    $query->addExpression('SUM(co.field_cost_value)', 'cost');
    $query->leftJoin('field_data_field_paid', 'pa', 'pa.entity_id = reg.id');
    $query->addExpression('SUM(pa.field_paid_value)', 'paid');

    $return = $query->execute()->fetchAll();
    return $return[0];
  } else {
    return $count;
  }*/

  return $count;

}

/**
 * Implement hook_entity_property_info()
 */

function pond_entity_property_info() {
  $info['worker']['properties']['registration'] = array(
    'label' => t("Registration"),
    'description' => t("Link to the relevant registration."),
    'type' => 'registrations',
    'getter callback' => 'pond_metadata_entity_get_properties',
  );
  $info['registrations']['properties']['worker'] = array(
    'label' => t("Worker"),
    'description' => t("Link to the relevant worker."),
    'type' => 'worker',
    'getter callback' => 'pond_metadata_entity_get_properties',
  );
  return $info;
}

function pond_metadata_entity_get_properties($entity, array $options, $name, $entity_type) {
  switch ($entity_type) {
    case 'worker':
      switch ($name) {
        case 'registration':
          $info = pond_get_by_uid($entity->uid, $entity->year);
          if(isset($info['registrations'])){
            return entity_load_single('registrations', $info['registrations']);
          }
        break;
      }
    break;
    case 'registrations':
      switch ($name) {
        case 'worker':
          $info = pond_get_by_uid($entity->uid, $entity->year);
          if(isset($info['worker'])){
            return entity_load_single('worker', $info['worker']);
          }
        break;
      }
    break;
  }
}

