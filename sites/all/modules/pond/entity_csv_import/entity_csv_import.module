<?php

/**
 * Implementation of hook_menu
 */
function entity_csv_import_menu(){
  $items = array();
  $items['admin/content/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_csv_import_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  //
  $items['admin/content/duplicates'] = array(
    'title' => 'Find Duplicate Entities',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('enitity_csv_import_duplicates_find'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  
  return $items;
}


function entity_csv_import_form($form, &$form_state){
  $form['#prefix'] = '<div id="form-replace">';
  $form['#suffix'] = '</div>';
  
  $form['csv'] = array(
    //'#name' => 'files[' . implode('_', $form['#parents']) . ']',
    '#type' => 'file',
    '#title' => t('Choose a file'),
    //'#title_display' => 'invisible',
    //'#size' => 22,
    //'#theme_wrappers' => array(),
    //'#weight' => -10,
    //'#ajax' => array(
      //'callback' => 'entity_csv_import_callback',
      //'wrapper' => 'form-replace',
    //),
  );
  if(!empty($form_state['storage'])){
  
  $row = 0;
  if (($handle = fopen($form_state['storage']['csv']->uri, "r")) !== FALSE) {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
          if($row == 0){ $row++; } else {//Skip the "header" row
            
            debug($data);
            
            $entity = entity_create('building', array());
            $entity->type = 'building';
            $entity->title = $data[1];
            
            
            
            $entity->field_building_code = array(LANGUAGE_NONE => array(0 => array('value' => $data[0])));
            $entity->field_address = array(LANGUAGE_NONE => array(0 => array('value' => $data[3].', '.$data[4])));
            
            $entity->field_active = array(LANGUAGE_NONE => array(0 => array('value' => 1)));
            
            
            
            
            //$entity->save();//HOT - LIVE IMPORT
            
            //pond_regos_save_relationship('is_in_zone', 'building', $entity->id, 'zone', $data[2], FALSE);
            //pond_regos_save_relationship('is_in_location', 'building', $entity->id, 'location', $data[5], FALSE);
            
            
            
            /*
            $query = new EntityFieldQuery();
            $result = $query->entityCondition('entity_type', 'church')
                    ->entityCondition('bundle', 'church')
                    ->propertyCondition('title', $data[0])
                    ->execute();
            $churches = array();
            if (isset($result['church'])) {
              $id = key($result['church']);
              $churches = entity_load('church', array($id));
            }
            if(!empty($churches[$id]->id)){//No point making a referee without a church...
              $entity = entity_create('referee', array());
              $entity->type = 'referee';
              $entity->title = $data[1];
              $entity->field_referee_position = array(LANGUAGE_NONE => array(0 => array('value' => $data[2])));
              $entity->field_referee_position_other = array(LANGUAGE_NONE => array(0 => array('value' => $data[3])));
              $entity->field_referee_phone_work = array(LANGUAGE_NONE => array(0 => array('value' => $data[4])));
              $entity->field_referee_mobile_number = array(LANGUAGE_NONE => array(0 => array('value' => $data[5])));
              $entity->field_referee_email = array(LANGUAGE_NONE => array(0 => array('value' => $data[6])));
              $entity->field_active = array(LANGUAGE_NONE => array(0 => array('value' => 1)));
              //$entity->save();//HOT - LIVE IMPORT
              $relation = relation_create('goes_to_church', array(
                  array('entity_type' => 'referee', 'entity_id' => $entity->id),
                  array('entity_type' => 'church', 'entity_id' => $churches[$id]->id),
                  ));
              //$rid = relation_save($relation);
            }
            */
          }
      }
      fclose($handle);
  }
  }
  
  //if(!empty($form_state['storage']['csv'])){
    //$form['debug'] = array('#value' => 'Hello World'.print_r($form_state['storage']['csv'], 1));
  //}
  
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#weight' => 1000,
  );
  
  return $form;
}

function entity_csv_import_form_validate($form, &$form_state){
  $file = file_save_upload('csv', array(
    'file_validate_extensions' => array('csv'), // Validate extensions.
  ));
  // If the file passed validation:
  if ($file) {
    // Move the file, into the Drupal file system
    if ($file = file_move($file, 'public://')) {
      // Save the file for use in the submit handler.
      $form_state['storage']['csv'] = $file;
    }
    else {
      form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
  $form_state['rebuild'] = TRUE;
}

function entity_csv_import_form_submit($form, &$form_state){
  
}

function entity_csv_import_callback($form, $form_state) {
  return $form;
}

  //step one: select type, select bundle, select fields to compare, pass it all to step 2
  //step two: foreach entity, build array: $fields['field_id'][eid] = 'value';
  // -- then compare: if(in_array($fields['field_id'], $this_value))
  // -- -- then add both this id and returned id to a new list which will get passed to entity_load


function enitity_csv_import_duplicates_callback($form, $form_state) {
  return $form;
}

function enitity_csv_import_duplicates_find($form, &$form_state) {

  if (!empty($form_state['page_num']) && $form_state['page_num'] == 2) {
    return enitity_csv_import_duplicates_find2($form, $form_state);
  }

  $form_state['page_num'] = 1;
  
  $form['#prefix'] = '<div id="form-replace">';
  $form['#suffix'] = '</div>';
  
  $type_options = $bundle_options = array();

  foreach (EntityType::loadAll() as $entity_type) {//These are only ECK entities
    $allowed_operations = '';
    if( eck__multiple_access_check( array( 'eck administer entity types', 'eck delete entity types') ) ){
      $type_options[$entity_type->name] = $entity_type->label;
    }
  }
  
  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Entity Type'),
    '#required' => TRUE,
    '#options' => $type_options,
    '#default_value' => !empty($form_state['values']['type']) ? $form_state['values']['type'] : '',
    '#ajax' => array(
      'callback' => 'enitity_csv_import_duplicates_callback',
      'wrapper' => 'form-replace',
    ),
  );
  
  $entity_type = !empty($form_state['values']['type']) ? $form_state['values']['type'] : key($type_options);
  $entity_type = entity_type_load($entity_type);
  if( eck__multiple_access_check(
      array( 'eck administer bundles', 
             'eck list bundles',
             "eck administer {$entity_type->name} bundles",
             "eck list {$entity_type->name} bundles"
  ) ) ){
    foreach (Bundle::loadByEntityType($entity_type) as $bundle) {
      $bundle_options[$bundle->name] = $bundle->label;
    }
  }
  $form['bundle'] = array(
    '#type' => 'select',
    '#title' => t('Entity Bundle'),
    '#required' => TRUE,
    '#options' => $bundle_options,
    '#default_value' => !empty($form_state['values']['bundle']) ? $form_state['values']['bundle'] : '',
  );
  
  // Select which "fields" we should compare
  
  
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next >>',
    //'#submit' => array('form_example_tutorial_8_next_submit'),
    //'#validate' => array('form_example_tutorial_8_next_validate'),
  );
  return $form;
}

/**
 * Returns the form for the second page of form_example_tutorial_8().
 *
function form_example_tutorial_8_page_two($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('A basic multistep form (page 2)'),
  );

  $form['color'] = array(
    '#type' => 'textfield',
    '#title' => t('Favorite color'),
    '#required' => TRUE,
    '#default_value' => !empty($form_state['values']['color']) ? $form_state['values']['color'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => array('form_example_tutorial_8_page_two_submit'),
  );
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => t('<< Back'),
    '#submit' => array('form_example_tutorial_8_page_two_back'),
    // We won't bother validating the required 'color' field, since they
    // have to come back to this page to submit anyway.
    '#limit_validation_errors' => array(),
  );
  return $form;
}


/**
 * Validate handler for the next button on first page.
 *
function form_example_tutorial_8_next_validate($form, &$form_state) {
  $year_of_birth = $form_state['values']['year_of_birth'];
  if ($year_of_birth && ($year_of_birth < 1900 || $year_of_birth > 2000)) {
    form_set_error('year_of_birth', t('Enter a year between 1900 and 2000.'));
  }
}

/**
 * Submit handler for form_example_tutorial_8() next button.
 *
 * Capture the values from page one and store them away so they can be used
 * at final submit time.
 *
function form_example_tutorial_8_next_submit($form, &$form_state) {

  // Values are saved for each page.
  // to carry forward to subsequent pages in the form.
  // and we tell FAPI to rebuild the form.
  $form_state['page_values'][1] = $form_state['values'];

  if (!empty($form_state['page_values'][2])) {
    $form_state['values'] = $form_state['page_values'][2];
  }

  // When form rebuilds, it will look at this to figure which page to build.
  $form_state['page_num'] = 2;
  $form_state['rebuild'] = TRUE;
}

/**
 * Back button handler submit handler.
 *
 * Since #limit_validation_errors = array() is set, values from page 2
 * will be discarded. We load the page 1 values instead.
 *
function form_example_tutorial_8_page_two_back($form, &$form_state) {
  $form_state['values'] = $form_state['page_values'][1];
  $form_state['page_num'] = 1;
  $form_state['rebuild'] = TRUE;
}

/**
 * The page 2 submit handler.
 *
 * This is the final submit handler. Gather all the data together and output
 * it in a drupal_set_message().
 *
function form_example_tutorial_8_page_two_submit($form, &$form_state) {
  // Normally, some code would go here to alter the database with the data
  // collected from the form. Instead sets a message with drupal_set_message()
  // to validate that the code worked.
  $page_one_values = $form_state['page_values'][1];
  drupal_set_message(t('The form has been submitted. name="@first @last", year of birth=@year_of_birth',
  array('@first' => $page_one_values['first'], '@last' => $page_one_values['last'], '@year_of_birth' => $page_one_values['year_of_birth'])));

  if (!empty($page_one_values['first2'])) {
    drupal_set_message(t('Second name: name="@first @last", year of birth=@year_of_birth',
    array('@first' => $page_one_values['first2'], '@last' => $page_one_values['last2'], '@year_of_birth' => $page_one_values['year_of_birth2'])));
  }
  drupal_set_message(t('And the favorite color is @color', array('@color' => $form_state['values']['color'])));

  // If we wanted to redirect on submission, set $form_state['redirect']
  // $form_state['redirect'] = 'node'; // Redirects the user to /node.
}
*/